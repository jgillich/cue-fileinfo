// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go runtime

package runtime

// gcGoalUtilization is the goal CPU utilization for
// marking as a fraction of GOMAXPROCS.
_#gcGoalUtilization: 3 / 10

// gcBackgroundUtilization is the fixed CPU utilization for background
// marking. It must be <= gcGoalUtilization. The difference between
// gcGoalUtilization and gcBackgroundUtilization will be made up by
// mark assists. The scheduler will aim to use within 50% of this
// goal.
//
// Setting this to < gcGoalUtilization avoids saturating the trigger
// feedback controller when there are no assists, which allows it to
// better control CPU and heap growth. However, the larger the gap,
// the more mutator assists are expected to happen, which impact
// mutator latency.
_#gcBackgroundUtilization: 1 / 4

// gcCreditSlack is the amount of scan work credit that can
// accumulate locally before updating gcController.scanWork and,
// optionally, gcController.bgScanCredit. Lower values give a more
// accurate assist ratio and make it more likely that assists will
// successfully steal background credit. Higher values reduce memory
// contention.
_#gcCreditSlack: 2000

// gcAssistTimeSlack is the nanoseconds of mutator assist time that
// can accumulate on a P before updating gcController.assistTime.
_#gcAssistTimeSlack: 5000

// gcOverAssistWork determines how many extra units of scan work a GC
// assist does when an assist happens. This amortizes the cost of an
// assist by pre-paying for this many bytes of future allocations.
_#gcOverAssistWork: 65536

// defaultHeapMinimum is the value of heapMinimum for GOGC==100.
_#defaultHeapMinimum: 4194304
