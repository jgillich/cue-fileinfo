// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/sirupsen/logrus

package logrus

// Fields type, used to pass to `WithFields`.
#Fields: {...}

// Level type
#Level: string // #enumLevel

#enumLevel:
	#PanicLevel |
	#FatalLevel |
	#ErrorLevel |
	#WarnLevel |
	#InfoLevel |
	#DebugLevel |
	#TraceLevel

#values_Level: {
	PanicLevel: #PanicLevel
	FatalLevel: #FatalLevel
	ErrorLevel: #ErrorLevel
	WarnLevel:  #WarnLevel
	InfoLevel:  #InfoLevel
	DebugLevel: #DebugLevel
	TraceLevel: #TraceLevel
}

// PanicLevel level, highest level of severity. Logs and then calls panic with the
// message passed to Debug, Info, ...
#PanicLevel: #Level & 0

// FatalLevel level. Logs and then calls `logger.Exit(1)`. It will exit even if the
// logging level is set to Panic.
#FatalLevel: #Level & 1

// ErrorLevel level. Logs. Used for errors that should definitely be noted.
// Commonly used for hooks to send errors to an error tracking service.
#ErrorLevel: #Level & 2

// WarnLevel level. Non-critical entries that deserve eyes.
#WarnLevel: #Level & 3

// InfoLevel level. General operational entries about what's going on inside the
// application.
#InfoLevel: #Level & 4

// DebugLevel level. Usually only enabled when debugging. Very verbose logging.
#DebugLevel: #Level & 5

// TraceLevel level. Designates finer-grained informational events than the Debug.
#TraceLevel: #Level & 6

// StdLogger is what your logrus-enabled library should take, that way
// it'll accept a stdlib logger and a logrus logger. There's no standard
// interface, this is the closest we get, unfortunately.
#StdLogger: _

// The FieldLogger interface generalizes the Entry and Logger types
#FieldLogger: _

// Ext1FieldLogger (the first extension to FieldLogger) is superfluous, it is
// here for consistancy. Do not use. Use Logger or Entry instead.
#Ext1FieldLogger: _
