// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/bitpoke/mysql-operator/pkg/apis/mysql/v1alpha1

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MysqlDatabaseConditionType defines the condition types of a MysqlDatabase resource
#MysqlDatabaseConditionType: string // #enumMysqlDatabaseConditionType

#enumMysqlDatabaseConditionType:
	#MysqlDatabaseReady

// MysqlDatabaseReady means the MySQL database is ready when database exists.
#MysqlDatabaseReady: #MysqlDatabaseConditionType & "Ready"

// MysqlDatabaseCondition defines the condition struct for a MysqlDatabase resource
#MysqlDatabaseCondition: {
	// Type of MysqlDatabase condition.
	type: #MysqlDatabaseConditionType @go(Type)

	// Status of the condition, one of True, False, Unknown.
	status: corev1.#ConditionStatus @go(Status)

	// The last time this condition was updated.
	lastUpdateTime?: metav1.#Time @go(LastUpdateTime)

	// Last time the condition transitioned from one status to another.
	lastTransitionTime: metav1.#Time @go(LastTransitionTime)

	// The reason for the condition's last transition.
	reason: string @go(Reason)

	// A human readable message indicating details about the transition.
	message: string @go(Message)
}

// MysqlDatabaseSpec defines the desired state of MysqlDatabaseSpec
#MysqlDatabaseSpec: {
	// ClusterRef represents a reference to the MySQL cluster.
	// This field should be immutable.
	clusterRef: #ClusterReference @go(ClusterRef)

	// Database represents the database name which will be created.
	// This field should be immutable.
	database: string @go(Database)

	// CharacterSet represents the charset name used when database is created
	characterSet?: string @go(CharacterSet)

	// Collation represents the collation name used as default database collation
	collation?: string @go(Collation)
}

// MysqlDatabaseStatus defines the observed state of MysqlDatabase
#MysqlDatabaseStatus: {
	// Conditions represents the MysqlDatabase  resource conditions list.
	conditions?: [...#MysqlDatabaseCondition] @go(Conditions,[]MysqlDatabaseCondition)
}

// MysqlDatabase is the Schema for the MySQL database API
#MysqlDatabase: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta   @go(ObjectMeta)
	spec?:     #MysqlDatabaseSpec   @go(Spec)
	status?:   #MysqlDatabaseStatus @go(Status)
}

// MysqlDatabaseList contains a list of MysqlDatabase
#MysqlDatabaseList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MysqlDatabase] @go(Items,[]MysqlDatabase)
}
