// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/bitpoke/mysql-operator/pkg/apis/mysql/v1alpha1

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterReference represents a cross namespace object reference
#ClusterReference: {
	corev1.#LocalObjectReference

	// Namespace the MySQL cluster namespace
	namespace?: string @go(Namespace)
}

// MysqlUserSpec defines the desired state of MysqlUserSpec
#MysqlUserSpec: {
	// ClusterRef represents a reference to the MySQL cluster.
	// This field should be immutable.
	clusterRef: #ClusterReference @go(ClusterRef)

	// User is the name of the user that will be created with will access the specified database.
	// This field should be immutable.
	user: string @go(User)

	// Password is the password for the user.
	password: corev1.#SecretKeySelector @go(Password)

	// AllowedHosts is the allowed host to connect from.
	allowedHosts: [...string] @go(AllowedHosts,[]string)

	// Permissions is the list of roles that user has in the specified database.
	permissions?: [...#MysqlPermission] @go(Permissions,[]MysqlPermission)

	// ResourceLimits allow settings limit per mysql user as defined here:
	// https://dev.mysql.com/doc/refman/5.7/en/user-resources.html
	// +optional
	resourceLimits?: corev1.#ResourceList @go(ResourceLimits)
}

// MysqlPermission defines a MySQL schema permission
#MysqlPermission: {
	// Schema represents the schema to which the permission applies
	schema: string @go(Schema)

	// Tables represents the tables inside the schema to which the permission applies
	tables: [...string] @go(Tables,[]string)

	// Permissions represents the permissions granted on the schema/tables
	permissions: [...string] @go(Permissions,[]string)
}

// AccountResourceMaxUserConnections it restricts the maximum number of simultaneous connections to the server
// by each account
#AccountResourceMaxUserConnections: corev1.#ResourceName & "MAX_USER_CONNECTIONS"

// AccountResourceMaxQueriesPerHour it restricts how many queries to the server
// are permitted to each account during any given one-hour period.
#AccountResourceMaxQueriesPerHour: corev1.#ResourceName & "MAX_QUERIES_PER_HOUR"

// AccountResourceMaxUpdatesPerHour it restricts how many updates to the server
// are permitted to each account during any given one-hour period.
#AccountResourceMaxUpdatesPerHour: corev1.#ResourceName & "MAX_UPDATES_PER_HOUR"

// AccountResourceMaxConnectionsPerHour it restricts how many connections to the server
// are permitted to each account during any given one-hour period.
#AccountResourceMaxConnectionsPerHour: corev1.#ResourceName & "MAX_CONNECTIONS_PER_HOUR"

// MysqlUserConditionType defines the condition types of a MysqlUser resource
#MysqlUserConditionType: string // #enumMysqlUserConditionType

#enumMysqlUserConditionType:
	#MySQLUserReady

// MySQLUserReady means the MySQL user is ready when database exists.
#MySQLUserReady: #MysqlUserConditionType & "Ready"

// MySQLUserCondition defines the condition struct for a MysqlUser resource
#MySQLUserCondition: {
	// Type of MysqlUser condition.
	type: #MysqlUserConditionType @go(Type)

	// Status of the condition, one of True, False, Unknown.
	status: corev1.#ConditionStatus @go(Status)

	// The last time this condition was updated.
	lastUpdateTime?: metav1.#Time @go(LastUpdateTime)

	// Last time the condition transitioned from one status to another.
	lastTransitionTime: metav1.#Time @go(LastTransitionTime)

	// The reason for the condition's last transition.
	reason: string @go(Reason)

	// A human readable message indicating details about the transition.
	message: string @go(Message)
}

// MysqlUserStatus defines the observed state of MysqlUser
#MysqlUserStatus: {
	// Conditions represents the MysqlUser resource conditions list.
	// +optional
	conditions?: [...#MySQLUserCondition] @go(Conditions,[]MySQLUserCondition)

	// AllowedHosts contains the list of hosts that the user is allowed to connect from.
	allowedHosts?: [...string] @go(AllowedHosts,[]string)
}

// MysqlUser is the Schema for the MySQL User API
#MysqlUser: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #MysqlUserSpec     @go(Spec)
	status?:   #MysqlUserStatus   @go(Status)
}

// MysqlUserList contains a list of MysqlUser
#MysqlUserList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items?: [...#MysqlUser] @go(Items,[]MysqlUser)
}
